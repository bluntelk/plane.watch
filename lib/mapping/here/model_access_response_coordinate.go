/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// AccessResponseCoordinate struct for AccessResponseCoordinate
type AccessResponseCoordinate struct {
	// Latitude of the address. For example: \"52.19404\"
	Lat float64 `json:"lat"`
	// Longitude of the address. For example: \"8.80135\"
	Lng float64 `json:"lng"`
}

// NewAccessResponseCoordinate instantiates a new AccessResponseCoordinate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessResponseCoordinate(lat float64, lng float64, ) *AccessResponseCoordinate {
	this := AccessResponseCoordinate{}
	this.Lat = lat
	this.Lng = lng
	return &this
}

// NewAccessResponseCoordinateWithDefaults instantiates a new AccessResponseCoordinate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessResponseCoordinateWithDefaults() *AccessResponseCoordinate {
	this := AccessResponseCoordinate{}
	return &this
}

// GetLat returns the Lat field value
func (o *AccessResponseCoordinate) GetLat() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Lat
}

// GetLatOk returns a tuple with the Lat field value
// and a boolean to check if the value has been set.
func (o *AccessResponseCoordinate) GetLatOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lat, true
}

// SetLat sets field value
func (o *AccessResponseCoordinate) SetLat(v float64) {
	o.Lat = v
}

// GetLng returns the Lng field value
func (o *AccessResponseCoordinate) GetLng() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Lng
}

// GetLngOk returns a tuple with the Lng field value
// and a boolean to check if the value has been set.
func (o *AccessResponseCoordinate) GetLngOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lng, true
}

// SetLng sets field value
func (o *AccessResponseCoordinate) SetLng(v float64) {
	o.Lng = v
}

func (o AccessResponseCoordinate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["lat"] = o.Lat
	}
	if true {
		toSerialize["lng"] = o.Lng
	}
	return json.Marshal(toSerialize)
}

type NullableAccessResponseCoordinate struct {
	value *AccessResponseCoordinate
	isSet bool
}

func (v NullableAccessResponseCoordinate) Get() *AccessResponseCoordinate {
	return v.value
}

func (v *NullableAccessResponseCoordinate) Set(val *AccessResponseCoordinate) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessResponseCoordinate) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessResponseCoordinate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessResponseCoordinate(val *AccessResponseCoordinate) *NullableAccessResponseCoordinate {
	return &NullableAccessResponseCoordinate{value: val, isSet: true}
}

func (v NullableAccessResponseCoordinate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessResponseCoordinate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


