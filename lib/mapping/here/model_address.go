/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// Address struct for Address
type Address struct {
	// Assembled address value built out of the address components according to the regional postal rules. These are the same rules for all endpoints. It may not include all the input terms. For example: \"Schulstraße 4, 32547 Bad Oeynhausen, Germany\"
	Label *string `json:"label,omitempty"`
	// A three-letter country code. For example: \"DEU\"
	CountryCode *string `json:"countryCode,omitempty"`
	// The localised country name. For example: \"Deutschland\"
	CountryName *string `json:"countryName,omitempty"`
	// A state code or state name abbreviation – country specific. For example, in the United States it is the two letter state abbreviation: \"CA\" for California.
	StateCode *string `json:"stateCode,omitempty"`
	// The state division of a country. For example: \"North Rhine-Westphalia\"
	State *string `json:"state,omitempty"`
	// A county code or county name abbreviation – country specific. For example, for Italy it is the province abbreviation: \"RM\" for Rome.
	CountyCode *string `json:"countyCode,omitempty"`
	// A division of a state; typically, a secondary-level administrative division of a country or equivalent.
	County *string `json:"county,omitempty"`
	// The name of the primary locality of the place. For example: \"Bad Oyenhausen\"
	City *string `json:"city,omitempty"`
	// A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: \"Bad Oyenhausen\"
	District *string `json:"district,omitempty"`
	// A subdivision of a district. For example: \"Minden-Lübbecke\"
	Subdistrict *string `json:"subdistrict,omitempty"`
	// Name of street. For example: \"Schulstrasse\"
	Street *string `json:"street,omitempty"`
	// Name of block.
	Block *string `json:"block,omitempty"`
	// Name of sub-block.
	Subblock *string `json:"subblock,omitempty"`
	// An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: \"32547\"
	PostalCode *string `json:"postalCode,omitempty"`
	// House number. For example: \"4\"
	HouseNumber *string `json:"houseNumber,omitempty"`
	// Name of building.
	Building *string `json:"building,omitempty"`
}

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress() *Address {
	this := Address{}
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Address) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Address) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Address) SetLabel(v string) {
	o.Label = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Address) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Address) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Address) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *Address) GetCountryName() string {
	if o == nil || o.CountryName == nil {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountryNameOk() (*string, bool) {
	if o == nil || o.CountryName == nil {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *Address) HasCountryName() bool {
	if o != nil && o.CountryName != nil {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *Address) SetCountryName(v string) {
	o.CountryName = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *Address) GetStateCode() string {
	if o == nil || o.StateCode == nil {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStateCodeOk() (*string, bool) {
	if o == nil || o.StateCode == nil {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *Address) HasStateCode() bool {
	if o != nil && o.StateCode != nil {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *Address) SetStateCode(v string) {
	o.StateCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Address) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Address) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Address) SetState(v string) {
	o.State = &v
}

// GetCountyCode returns the CountyCode field value if set, zero value otherwise.
func (o *Address) GetCountyCode() string {
	if o == nil || o.CountyCode == nil {
		var ret string
		return ret
	}
	return *o.CountyCode
}

// GetCountyCodeOk returns a tuple with the CountyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountyCodeOk() (*string, bool) {
	if o == nil || o.CountyCode == nil {
		return nil, false
	}
	return o.CountyCode, true
}

// HasCountyCode returns a boolean if a field has been set.
func (o *Address) HasCountyCode() bool {
	if o != nil && o.CountyCode != nil {
		return true
	}

	return false
}

// SetCountyCode gets a reference to the given string and assigns it to the CountyCode field.
func (o *Address) SetCountyCode(v string) {
	o.CountyCode = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *Address) GetCounty() string {
	if o == nil || o.County == nil {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCountyOk() (*string, bool) {
	if o == nil || o.County == nil {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *Address) HasCounty() bool {
	if o != nil && o.County != nil {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *Address) SetCounty(v string) {
	o.County = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Address) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Address) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Address) SetCity(v string) {
	o.City = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *Address) GetDistrict() string {
	if o == nil || o.District == nil {
		var ret string
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetDistrictOk() (*string, bool) {
	if o == nil || o.District == nil {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *Address) HasDistrict() bool {
	if o != nil && o.District != nil {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given string and assigns it to the District field.
func (o *Address) SetDistrict(v string) {
	o.District = &v
}

// GetSubdistrict returns the Subdistrict field value if set, zero value otherwise.
func (o *Address) GetSubdistrict() string {
	if o == nil || o.Subdistrict == nil {
		var ret string
		return ret
	}
	return *o.Subdistrict
}

// GetSubdistrictOk returns a tuple with the Subdistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetSubdistrictOk() (*string, bool) {
	if o == nil || o.Subdistrict == nil {
		return nil, false
	}
	return o.Subdistrict, true
}

// HasSubdistrict returns a boolean if a field has been set.
func (o *Address) HasSubdistrict() bool {
	if o != nil && o.Subdistrict != nil {
		return true
	}

	return false
}

// SetSubdistrict gets a reference to the given string and assigns it to the Subdistrict field.
func (o *Address) SetSubdistrict(v string) {
	o.Subdistrict = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *Address) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *Address) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *Address) SetStreet(v string) {
	o.Street = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *Address) GetBlock() string {
	if o == nil || o.Block == nil {
		var ret string
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBlockOk() (*string, bool) {
	if o == nil || o.Block == nil {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *Address) HasBlock() bool {
	if o != nil && o.Block != nil {
		return true
	}

	return false
}

// SetBlock gets a reference to the given string and assigns it to the Block field.
func (o *Address) SetBlock(v string) {
	o.Block = &v
}

// GetSubblock returns the Subblock field value if set, zero value otherwise.
func (o *Address) GetSubblock() string {
	if o == nil || o.Subblock == nil {
		var ret string
		return ret
	}
	return *o.Subblock
}

// GetSubblockOk returns a tuple with the Subblock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetSubblockOk() (*string, bool) {
	if o == nil || o.Subblock == nil {
		return nil, false
	}
	return o.Subblock, true
}

// HasSubblock returns a boolean if a field has been set.
func (o *Address) HasSubblock() bool {
	if o != nil && o.Subblock != nil {
		return true
	}

	return false
}

// SetSubblock gets a reference to the given string and assigns it to the Subblock field.
func (o *Address) SetSubblock(v string) {
	o.Subblock = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *Address) GetPostalCode() string {
	if o == nil || o.PostalCode == nil {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetPostalCodeOk() (*string, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *Address) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *Address) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetHouseNumber returns the HouseNumber field value if set, zero value otherwise.
func (o *Address) GetHouseNumber() string {
	if o == nil || o.HouseNumber == nil {
		var ret string
		return ret
	}
	return *o.HouseNumber
}

// GetHouseNumberOk returns a tuple with the HouseNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetHouseNumberOk() (*string, bool) {
	if o == nil || o.HouseNumber == nil {
		return nil, false
	}
	return o.HouseNumber, true
}

// HasHouseNumber returns a boolean if a field has been set.
func (o *Address) HasHouseNumber() bool {
	if o != nil && o.HouseNumber != nil {
		return true
	}

	return false
}

// SetHouseNumber gets a reference to the given string and assigns it to the HouseNumber field.
func (o *Address) SetHouseNumber(v string) {
	o.HouseNumber = &v
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *Address) GetBuilding() string {
	if o == nil || o.Building == nil {
		var ret string
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Address) GetBuildingOk() (*string, bool) {
	if o == nil || o.Building == nil {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *Address) HasBuilding() bool {
	if o != nil && o.Building != nil {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given string and assigns it to the Building field.
func (o *Address) SetBuilding(v string) {
	o.Building = &v
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.CountryCode != nil {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.CountryName != nil {
		toSerialize["countryName"] = o.CountryName
	}
	if o.StateCode != nil {
		toSerialize["stateCode"] = o.StateCode
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.CountyCode != nil {
		toSerialize["countyCode"] = o.CountyCode
	}
	if o.County != nil {
		toSerialize["county"] = o.County
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.District != nil {
		toSerialize["district"] = o.District
	}
	if o.Subdistrict != nil {
		toSerialize["subdistrict"] = o.Subdistrict
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.Block != nil {
		toSerialize["block"] = o.Block
	}
	if o.Subblock != nil {
		toSerialize["subblock"] = o.Subblock
	}
	if o.PostalCode != nil {
		toSerialize["postalCode"] = o.PostalCode
	}
	if o.HouseNumber != nil {
		toSerialize["houseNumber"] = o.HouseNumber
	}
	if o.Building != nil {
		toSerialize["building"] = o.Building
	}
	return json.Marshal(toSerialize)
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


