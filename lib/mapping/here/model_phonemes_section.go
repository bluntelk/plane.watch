/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// PhonemesSection struct for PhonemesSection
type PhonemesSection struct {
	// Phonemes for the name of the place.
	PlaceName *[]Phoneme `json:"placeName,omitempty"`
	// Phonemes for the county name.
	CountryName *[]Phoneme `json:"countryName,omitempty"`
	// Phonemes for the state name.
	State *[]Phoneme `json:"state,omitempty"`
	// Phonemes for the county name.
	County *[]Phoneme `json:"county,omitempty"`
	// Phonemes for the city name.
	City *[]Phoneme `json:"city,omitempty"`
	// Phonemes for the district name.
	District *[]Phoneme `json:"district,omitempty"`
	// Phonemes for the subdistrict name.
	Subdistrict *[]Phoneme `json:"subdistrict,omitempty"`
	// Phonemes for the street name.
	Street *[]Phoneme `json:"street,omitempty"`
	// Phonemes for the block.
	Block *[]Phoneme `json:"block,omitempty"`
	// Phonemes for the sub-block.
	Subblock *[]Phoneme `json:"subblock,omitempty"`
}

// NewPhonemesSection instantiates a new PhonemesSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhonemesSection() *PhonemesSection {
	this := PhonemesSection{}
	return &this
}

// NewPhonemesSectionWithDefaults instantiates a new PhonemesSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhonemesSectionWithDefaults() *PhonemesSection {
	this := PhonemesSection{}
	return &this
}

// GetPlaceName returns the PlaceName field value if set, zero value otherwise.
func (o *PhonemesSection) GetPlaceName() []Phoneme {
	if o == nil || o.PlaceName == nil {
		var ret []Phoneme
		return ret
	}
	return *o.PlaceName
}

// GetPlaceNameOk returns a tuple with the PlaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetPlaceNameOk() (*[]Phoneme, bool) {
	if o == nil || o.PlaceName == nil {
		return nil, false
	}
	return o.PlaceName, true
}

// HasPlaceName returns a boolean if a field has been set.
func (o *PhonemesSection) HasPlaceName() bool {
	if o != nil && o.PlaceName != nil {
		return true
	}

	return false
}

// SetPlaceName gets a reference to the given []Phoneme and assigns it to the PlaceName field.
func (o *PhonemesSection) SetPlaceName(v []Phoneme) {
	o.PlaceName = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *PhonemesSection) GetCountryName() []Phoneme {
	if o == nil || o.CountryName == nil {
		var ret []Phoneme
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetCountryNameOk() (*[]Phoneme, bool) {
	if o == nil || o.CountryName == nil {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *PhonemesSection) HasCountryName() bool {
	if o != nil && o.CountryName != nil {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given []Phoneme and assigns it to the CountryName field.
func (o *PhonemesSection) SetCountryName(v []Phoneme) {
	o.CountryName = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PhonemesSection) GetState() []Phoneme {
	if o == nil || o.State == nil {
		var ret []Phoneme
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetStateOk() (*[]Phoneme, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PhonemesSection) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given []Phoneme and assigns it to the State field.
func (o *PhonemesSection) SetState(v []Phoneme) {
	o.State = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *PhonemesSection) GetCounty() []Phoneme {
	if o == nil || o.County == nil {
		var ret []Phoneme
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetCountyOk() (*[]Phoneme, bool) {
	if o == nil || o.County == nil {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *PhonemesSection) HasCounty() bool {
	if o != nil && o.County != nil {
		return true
	}

	return false
}

// SetCounty gets a reference to the given []Phoneme and assigns it to the County field.
func (o *PhonemesSection) SetCounty(v []Phoneme) {
	o.County = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *PhonemesSection) GetCity() []Phoneme {
	if o == nil || o.City == nil {
		var ret []Phoneme
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetCityOk() (*[]Phoneme, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *PhonemesSection) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given []Phoneme and assigns it to the City field.
func (o *PhonemesSection) SetCity(v []Phoneme) {
	o.City = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *PhonemesSection) GetDistrict() []Phoneme {
	if o == nil || o.District == nil {
		var ret []Phoneme
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetDistrictOk() (*[]Phoneme, bool) {
	if o == nil || o.District == nil {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *PhonemesSection) HasDistrict() bool {
	if o != nil && o.District != nil {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given []Phoneme and assigns it to the District field.
func (o *PhonemesSection) SetDistrict(v []Phoneme) {
	o.District = &v
}

// GetSubdistrict returns the Subdistrict field value if set, zero value otherwise.
func (o *PhonemesSection) GetSubdistrict() []Phoneme {
	if o == nil || o.Subdistrict == nil {
		var ret []Phoneme
		return ret
	}
	return *o.Subdistrict
}

// GetSubdistrictOk returns a tuple with the Subdistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetSubdistrictOk() (*[]Phoneme, bool) {
	if o == nil || o.Subdistrict == nil {
		return nil, false
	}
	return o.Subdistrict, true
}

// HasSubdistrict returns a boolean if a field has been set.
func (o *PhonemesSection) HasSubdistrict() bool {
	if o != nil && o.Subdistrict != nil {
		return true
	}

	return false
}

// SetSubdistrict gets a reference to the given []Phoneme and assigns it to the Subdistrict field.
func (o *PhonemesSection) SetSubdistrict(v []Phoneme) {
	o.Subdistrict = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *PhonemesSection) GetStreet() []Phoneme {
	if o == nil || o.Street == nil {
		var ret []Phoneme
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetStreetOk() (*[]Phoneme, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *PhonemesSection) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given []Phoneme and assigns it to the Street field.
func (o *PhonemesSection) SetStreet(v []Phoneme) {
	o.Street = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *PhonemesSection) GetBlock() []Phoneme {
	if o == nil || o.Block == nil {
		var ret []Phoneme
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetBlockOk() (*[]Phoneme, bool) {
	if o == nil || o.Block == nil {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *PhonemesSection) HasBlock() bool {
	if o != nil && o.Block != nil {
		return true
	}

	return false
}

// SetBlock gets a reference to the given []Phoneme and assigns it to the Block field.
func (o *PhonemesSection) SetBlock(v []Phoneme) {
	o.Block = &v
}

// GetSubblock returns the Subblock field value if set, zero value otherwise.
func (o *PhonemesSection) GetSubblock() []Phoneme {
	if o == nil || o.Subblock == nil {
		var ret []Phoneme
		return ret
	}
	return *o.Subblock
}

// GetSubblockOk returns a tuple with the Subblock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhonemesSection) GetSubblockOk() (*[]Phoneme, bool) {
	if o == nil || o.Subblock == nil {
		return nil, false
	}
	return o.Subblock, true
}

// HasSubblock returns a boolean if a field has been set.
func (o *PhonemesSection) HasSubblock() bool {
	if o != nil && o.Subblock != nil {
		return true
	}

	return false
}

// SetSubblock gets a reference to the given []Phoneme and assigns it to the Subblock field.
func (o *PhonemesSection) SetSubblock(v []Phoneme) {
	o.Subblock = &v
}

func (o PhonemesSection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PlaceName != nil {
		toSerialize["placeName"] = o.PlaceName
	}
	if o.CountryName != nil {
		toSerialize["countryName"] = o.CountryName
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.County != nil {
		toSerialize["county"] = o.County
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.District != nil {
		toSerialize["district"] = o.District
	}
	if o.Subdistrict != nil {
		toSerialize["subdistrict"] = o.Subdistrict
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.Block != nil {
		toSerialize["block"] = o.Block
	}
	if o.Subblock != nil {
		toSerialize["subblock"] = o.Subblock
	}
	return json.Marshal(toSerialize)
}

type NullablePhonemesSection struct {
	value *PhonemesSection
	isSet bool
}

func (v NullablePhonemesSection) Get() *PhonemesSection {
	return v.value
}

func (v *NullablePhonemesSection) Set(val *PhonemesSection) {
	v.value = val
	v.isSet = true
}

func (v NullablePhonemesSection) IsSet() bool {
	return v.isSet
}

func (v *NullablePhonemesSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhonemesSection(val *PhonemesSection) *NullablePhonemesSection {
	return &NullablePhonemesSection{value: val, isSet: true}
}

func (v NullablePhonemesSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhonemesSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


