/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// EvChargingPoint struct for EvChargingPoint
type EvChargingPoint struct {
	// Number of physical connectors in the connectors group
	NumberOfConnectors *int32 `json:"numberOfConnectors,omitempty"`
	// Charge mode of the connectors group. For more information, check the [IEC-61851-1](https://en.wikipedia.org/w/index.php?title=Charging_station&oldid=1013010605#IEC-61851-1_Charging_Modes) standard.
	ChargeMode *string `json:"chargeMode,omitempty"`
	// Voltage provided by the connectors group
	VoltsRange *string `json:"voltsRange,omitempty"`
	// Number of phases provided by the connectors group
	Phases *int32 `json:"phases,omitempty"`
	// Amperage provided by the connectors group
	AmpsRange *string `json:"ampsRange,omitempty"`
}

// NewEvChargingPoint instantiates a new EvChargingPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvChargingPoint() *EvChargingPoint {
	this := EvChargingPoint{}
	return &this
}

// NewEvChargingPointWithDefaults instantiates a new EvChargingPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvChargingPointWithDefaults() *EvChargingPoint {
	this := EvChargingPoint{}
	return &this
}

// GetNumberOfConnectors returns the NumberOfConnectors field value if set, zero value otherwise.
func (o *EvChargingPoint) GetNumberOfConnectors() int32 {
	if o == nil || o.NumberOfConnectors == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfConnectors
}

// GetNumberOfConnectorsOk returns a tuple with the NumberOfConnectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvChargingPoint) GetNumberOfConnectorsOk() (*int32, bool) {
	if o == nil || o.NumberOfConnectors == nil {
		return nil, false
	}
	return o.NumberOfConnectors, true
}

// HasNumberOfConnectors returns a boolean if a field has been set.
func (o *EvChargingPoint) HasNumberOfConnectors() bool {
	if o != nil && o.NumberOfConnectors != nil {
		return true
	}

	return false
}

// SetNumberOfConnectors gets a reference to the given int32 and assigns it to the NumberOfConnectors field.
func (o *EvChargingPoint) SetNumberOfConnectors(v int32) {
	o.NumberOfConnectors = &v
}

// GetChargeMode returns the ChargeMode field value if set, zero value otherwise.
func (o *EvChargingPoint) GetChargeMode() string {
	if o == nil || o.ChargeMode == nil {
		var ret string
		return ret
	}
	return *o.ChargeMode
}

// GetChargeModeOk returns a tuple with the ChargeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvChargingPoint) GetChargeModeOk() (*string, bool) {
	if o == nil || o.ChargeMode == nil {
		return nil, false
	}
	return o.ChargeMode, true
}

// HasChargeMode returns a boolean if a field has been set.
func (o *EvChargingPoint) HasChargeMode() bool {
	if o != nil && o.ChargeMode != nil {
		return true
	}

	return false
}

// SetChargeMode gets a reference to the given string and assigns it to the ChargeMode field.
func (o *EvChargingPoint) SetChargeMode(v string) {
	o.ChargeMode = &v
}

// GetVoltsRange returns the VoltsRange field value if set, zero value otherwise.
func (o *EvChargingPoint) GetVoltsRange() string {
	if o == nil || o.VoltsRange == nil {
		var ret string
		return ret
	}
	return *o.VoltsRange
}

// GetVoltsRangeOk returns a tuple with the VoltsRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvChargingPoint) GetVoltsRangeOk() (*string, bool) {
	if o == nil || o.VoltsRange == nil {
		return nil, false
	}
	return o.VoltsRange, true
}

// HasVoltsRange returns a boolean if a field has been set.
func (o *EvChargingPoint) HasVoltsRange() bool {
	if o != nil && o.VoltsRange != nil {
		return true
	}

	return false
}

// SetVoltsRange gets a reference to the given string and assigns it to the VoltsRange field.
func (o *EvChargingPoint) SetVoltsRange(v string) {
	o.VoltsRange = &v
}

// GetPhases returns the Phases field value if set, zero value otherwise.
func (o *EvChargingPoint) GetPhases() int32 {
	if o == nil || o.Phases == nil {
		var ret int32
		return ret
	}
	return *o.Phases
}

// GetPhasesOk returns a tuple with the Phases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvChargingPoint) GetPhasesOk() (*int32, bool) {
	if o == nil || o.Phases == nil {
		return nil, false
	}
	return o.Phases, true
}

// HasPhases returns a boolean if a field has been set.
func (o *EvChargingPoint) HasPhases() bool {
	if o != nil && o.Phases != nil {
		return true
	}

	return false
}

// SetPhases gets a reference to the given int32 and assigns it to the Phases field.
func (o *EvChargingPoint) SetPhases(v int32) {
	o.Phases = &v
}

// GetAmpsRange returns the AmpsRange field value if set, zero value otherwise.
func (o *EvChargingPoint) GetAmpsRange() string {
	if o == nil || o.AmpsRange == nil {
		var ret string
		return ret
	}
	return *o.AmpsRange
}

// GetAmpsRangeOk returns a tuple with the AmpsRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvChargingPoint) GetAmpsRangeOk() (*string, bool) {
	if o == nil || o.AmpsRange == nil {
		return nil, false
	}
	return o.AmpsRange, true
}

// HasAmpsRange returns a boolean if a field has been set.
func (o *EvChargingPoint) HasAmpsRange() bool {
	if o != nil && o.AmpsRange != nil {
		return true
	}

	return false
}

// SetAmpsRange gets a reference to the given string and assigns it to the AmpsRange field.
func (o *EvChargingPoint) SetAmpsRange(v string) {
	o.AmpsRange = &v
}

func (o EvChargingPoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumberOfConnectors != nil {
		toSerialize["numberOfConnectors"] = o.NumberOfConnectors
	}
	if o.ChargeMode != nil {
		toSerialize["chargeMode"] = o.ChargeMode
	}
	if o.VoltsRange != nil {
		toSerialize["voltsRange"] = o.VoltsRange
	}
	if o.Phases != nil {
		toSerialize["phases"] = o.Phases
	}
	if o.AmpsRange != nil {
		toSerialize["ampsRange"] = o.AmpsRange
	}
	return json.Marshal(toSerialize)
}

type NullableEvChargingPoint struct {
	value *EvChargingPoint
	isSet bool
}

func (v NullableEvChargingPoint) Get() *EvChargingPoint {
	return v.value
}

func (v *NullableEvChargingPoint) Set(val *EvChargingPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableEvChargingPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableEvChargingPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvChargingPoint(val *EvChargingPoint) *NullableEvChargingPoint {
	return &NullableEvChargingPoint{value: val, isSet: true}
}

func (v NullableEvChargingPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvChargingPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


