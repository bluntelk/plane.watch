/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// OpeningHours struct for OpeningHours
type OpeningHours struct {
	// The list of place categories, this set of opening hours refers to.
	Categories *[]Category `json:"categories,omitempty"`
	Text []string `json:"text"`
	IsOpen *bool `json:"isOpen,omitempty"`
	// List of iCalender-based structured representations of opening hours
	Structured []StructuredOpeningHours `json:"structured"`
}

// NewOpeningHours instantiates a new OpeningHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpeningHours(text []string, structured []StructuredOpeningHours, ) *OpeningHours {
	this := OpeningHours{}
	this.Text = text
	this.Structured = structured
	return &this
}

// NewOpeningHoursWithDefaults instantiates a new OpeningHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpeningHoursWithDefaults() *OpeningHours {
	this := OpeningHours{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *OpeningHours) GetCategories() []Category {
	if o == nil || o.Categories == nil {
		var ret []Category
		return ret
	}
	return *o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpeningHours) GetCategoriesOk() (*[]Category, bool) {
	if o == nil || o.Categories == nil {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *OpeningHours) HasCategories() bool {
	if o != nil && o.Categories != nil {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *OpeningHours) SetCategories(v []Category) {
	o.Categories = &v
}

// GetText returns the Text field value
func (o *OpeningHours) GetText() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *OpeningHours) GetTextOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *OpeningHours) SetText(v []string) {
	o.Text = v
}

// GetIsOpen returns the IsOpen field value if set, zero value otherwise.
func (o *OpeningHours) GetIsOpen() bool {
	if o == nil || o.IsOpen == nil {
		var ret bool
		return ret
	}
	return *o.IsOpen
}

// GetIsOpenOk returns a tuple with the IsOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpeningHours) GetIsOpenOk() (*bool, bool) {
	if o == nil || o.IsOpen == nil {
		return nil, false
	}
	return o.IsOpen, true
}

// HasIsOpen returns a boolean if a field has been set.
func (o *OpeningHours) HasIsOpen() bool {
	if o != nil && o.IsOpen != nil {
		return true
	}

	return false
}

// SetIsOpen gets a reference to the given bool and assigns it to the IsOpen field.
func (o *OpeningHours) SetIsOpen(v bool) {
	o.IsOpen = &v
}

// GetStructured returns the Structured field value
func (o *OpeningHours) GetStructured() []StructuredOpeningHours {
	if o == nil  {
		var ret []StructuredOpeningHours
		return ret
	}

	return o.Structured
}

// GetStructuredOk returns a tuple with the Structured field value
// and a boolean to check if the value has been set.
func (o *OpeningHours) GetStructuredOk() (*[]StructuredOpeningHours, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Structured, true
}

// SetStructured sets field value
func (o *OpeningHours) SetStructured(v []StructuredOpeningHours) {
	o.Structured = v
}

func (o OpeningHours) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Categories != nil {
		toSerialize["categories"] = o.Categories
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if o.IsOpen != nil {
		toSerialize["isOpen"] = o.IsOpen
	}
	if true {
		toSerialize["structured"] = o.Structured
	}
	return json.Marshal(toSerialize)
}

type NullableOpeningHours struct {
	value *OpeningHours
	isSet bool
}

func (v NullableOpeningHours) Get() *OpeningHours {
	return v.value
}

func (v *NullableOpeningHours) Set(val *OpeningHours) {
	v.value = val
	v.isSet = true
}

func (v NullableOpeningHours) IsSet() bool {
	return v.isSet
}

func (v *NullableOpeningHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpeningHours(val *OpeningHours) *NullableOpeningHours {
	return &NullableOpeningHours{value: val, isSet: true}
}

func (v NullableOpeningHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpeningHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


