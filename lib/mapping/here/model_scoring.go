/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// Scoring struct for Scoring
type Scoring struct {
	// Indicates how good the input matches the returned address. It is equal to 1 if all input tokens are recognized and matched.
	QueryScore *float64 `json:"queryScore,omitempty"`
	// Indicates how good the individual result fields match to the corresponding part of the query. Is included only for the result fields that are actually matched to the query.
	FieldScore *FieldScore `json:"fieldScore,omitempty"`
}

// NewScoring instantiates a new Scoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoring() *Scoring {
	this := Scoring{}
	return &this
}

// NewScoringWithDefaults instantiates a new Scoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoringWithDefaults() *Scoring {
	this := Scoring{}
	return &this
}

// GetQueryScore returns the QueryScore field value if set, zero value otherwise.
func (o *Scoring) GetQueryScore() float64 {
	if o == nil || o.QueryScore == nil {
		var ret float64
		return ret
	}
	return *o.QueryScore
}

// GetQueryScoreOk returns a tuple with the QueryScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scoring) GetQueryScoreOk() (*float64, bool) {
	if o == nil || o.QueryScore == nil {
		return nil, false
	}
	return o.QueryScore, true
}

// HasQueryScore returns a boolean if a field has been set.
func (o *Scoring) HasQueryScore() bool {
	if o != nil && o.QueryScore != nil {
		return true
	}

	return false
}

// SetQueryScore gets a reference to the given float64 and assigns it to the QueryScore field.
func (o *Scoring) SetQueryScore(v float64) {
	o.QueryScore = &v
}

// GetFieldScore returns the FieldScore field value if set, zero value otherwise.
func (o *Scoring) GetFieldScore() FieldScore {
	if o == nil || o.FieldScore == nil {
		var ret FieldScore
		return ret
	}
	return *o.FieldScore
}

// GetFieldScoreOk returns a tuple with the FieldScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scoring) GetFieldScoreOk() (*FieldScore, bool) {
	if o == nil || o.FieldScore == nil {
		return nil, false
	}
	return o.FieldScore, true
}

// HasFieldScore returns a boolean if a field has been set.
func (o *Scoring) HasFieldScore() bool {
	if o != nil && o.FieldScore != nil {
		return true
	}

	return false
}

// SetFieldScore gets a reference to the given FieldScore and assigns it to the FieldScore field.
func (o *Scoring) SetFieldScore(v FieldScore) {
	o.FieldScore = &v
}

func (o Scoring) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QueryScore != nil {
		toSerialize["queryScore"] = o.QueryScore
	}
	if o.FieldScore != nil {
		toSerialize["fieldScore"] = o.FieldScore
	}
	return json.Marshal(toSerialize)
}

type NullableScoring struct {
	value *Scoring
	isSet bool
}

func (v NullableScoring) Get() *Scoring {
	return v.value
}

func (v *NullableScoring) Set(val *Scoring) {
	v.value = val
	v.isSet = true
}

func (v NullableScoring) IsSet() bool {
	return v.isSet
}

func (v *NullableScoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoring(val *Scoring) *NullableScoring {
	return &NullableScoring{value: val, isSet: true}
}

func (v NullableScoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


