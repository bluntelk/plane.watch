/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// OpenSearchReverseGeocodeResponse struct for OpenSearchReverseGeocodeResponse
type OpenSearchReverseGeocodeResponse struct {
	// The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.
	Items []ReverseGeocodeResultItem `json:"items"`
}

// NewOpenSearchReverseGeocodeResponse instantiates a new OpenSearchReverseGeocodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenSearchReverseGeocodeResponse(items []ReverseGeocodeResultItem, ) *OpenSearchReverseGeocodeResponse {
	this := OpenSearchReverseGeocodeResponse{}
	this.Items = items
	return &this
}

// NewOpenSearchReverseGeocodeResponseWithDefaults instantiates a new OpenSearchReverseGeocodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenSearchReverseGeocodeResponseWithDefaults() *OpenSearchReverseGeocodeResponse {
	this := OpenSearchReverseGeocodeResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *OpenSearchReverseGeocodeResponse) GetItems() []ReverseGeocodeResultItem {
	if o == nil  {
		var ret []ReverseGeocodeResultItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *OpenSearchReverseGeocodeResponse) GetItemsOk() (*[]ReverseGeocodeResultItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *OpenSearchReverseGeocodeResponse) SetItems(v []ReverseGeocodeResultItem) {
	o.Items = v
}

func (o OpenSearchReverseGeocodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableOpenSearchReverseGeocodeResponse struct {
	value *OpenSearchReverseGeocodeResponse
	isSet bool
}

func (v NullableOpenSearchReverseGeocodeResponse) Get() *OpenSearchReverseGeocodeResponse {
	return v.value
}

func (v *NullableOpenSearchReverseGeocodeResponse) Set(val *OpenSearchReverseGeocodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenSearchReverseGeocodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenSearchReverseGeocodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenSearchReverseGeocodeResponse(val *OpenSearchReverseGeocodeResponse) *NullableOpenSearchReverseGeocodeResponse {
	return &NullableOpenSearchReverseGeocodeResponse{value: val, isSet: true}
}

func (v NullableOpenSearchReverseGeocodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenSearchReverseGeocodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


