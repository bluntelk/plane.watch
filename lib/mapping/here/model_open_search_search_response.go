/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// OpenSearchSearchResponse struct for OpenSearchSearchResponse
type OpenSearchSearchResponse struct {
	// The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.
	Items []OneboxSearchResultItem `json:"items"`
}

// NewOpenSearchSearchResponse instantiates a new OpenSearchSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenSearchSearchResponse(items []OneboxSearchResultItem, ) *OpenSearchSearchResponse {
	this := OpenSearchSearchResponse{}
	this.Items = items
	return &this
}

// NewOpenSearchSearchResponseWithDefaults instantiates a new OpenSearchSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenSearchSearchResponseWithDefaults() *OpenSearchSearchResponse {
	this := OpenSearchSearchResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *OpenSearchSearchResponse) GetItems() []OneboxSearchResultItem {
	if o == nil  {
		var ret []OneboxSearchResultItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *OpenSearchSearchResponse) GetItemsOk() (*[]OneboxSearchResultItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *OpenSearchSearchResponse) SetItems(v []OneboxSearchResultItem) {
	o.Items = v
}

func (o OpenSearchSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableOpenSearchSearchResponse struct {
	value *OpenSearchSearchResponse
	isSet bool
}

func (v NullableOpenSearchSearchResponse) Get() *OpenSearchSearchResponse {
	return v.value
}

func (v *NullableOpenSearchSearchResponse) Set(val *OpenSearchSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenSearchSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenSearchSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenSearchSearchResponse(val *OpenSearchSearchResponse) *NullableOpenSearchSearchResponse {
	return &NullableOpenSearchSearchResponse{value: val, isSet: true}
}

func (v NullableOpenSearchSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenSearchSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


