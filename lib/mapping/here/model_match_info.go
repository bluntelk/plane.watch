/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// MatchInfo struct for MatchInfo
type MatchInfo struct {
	// First index of the matched range (0-based indexing, inclusive)
	Start int32 `json:"start"`
	// One past the last index of the matched range (0-based indexing, exclusive); The difference between end and start gives the length of the term
	End int32 `json:"end"`
	// Matched term in the input string
	Value string `json:"value"`
	// The matched qualified query field type. If this is not returned, then matched value refers to the freetext query
	Qq *string `json:"qq,omitempty"`
}

// NewMatchInfo instantiates a new MatchInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchInfo(start int32, end int32, value string, ) *MatchInfo {
	this := MatchInfo{}
	this.Start = start
	this.End = end
	this.Value = value
	return &this
}

// NewMatchInfoWithDefaults instantiates a new MatchInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchInfoWithDefaults() *MatchInfo {
	this := MatchInfo{}
	return &this
}

// GetStart returns the Start field value
func (o *MatchInfo) GetStart() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *MatchInfo) GetStartOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *MatchInfo) SetStart(v int32) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *MatchInfo) GetEnd() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *MatchInfo) GetEndOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *MatchInfo) SetEnd(v int32) {
	o.End = v
}

// GetValue returns the Value field value
func (o *MatchInfo) GetValue() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MatchInfo) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MatchInfo) SetValue(v string) {
	o.Value = v
}

// GetQq returns the Qq field value if set, zero value otherwise.
func (o *MatchInfo) GetQq() string {
	if o == nil || o.Qq == nil {
		var ret string
		return ret
	}
	return *o.Qq
}

// GetQqOk returns a tuple with the Qq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchInfo) GetQqOk() (*string, bool) {
	if o == nil || o.Qq == nil {
		return nil, false
	}
	return o.Qq, true
}

// HasQq returns a boolean if a field has been set.
func (o *MatchInfo) HasQq() bool {
	if o != nil && o.Qq != nil {
		return true
	}

	return false
}

// SetQq gets a reference to the given string and assigns it to the Qq field.
func (o *MatchInfo) SetQq(v string) {
	o.Qq = &v
}

func (o MatchInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["start"] = o.Start
	}
	if true {
		toSerialize["end"] = o.End
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if o.Qq != nil {
		toSerialize["qq"] = o.Qq
	}
	return json.Marshal(toSerialize)
}

type NullableMatchInfo struct {
	value *MatchInfo
	isSet bool
}

func (v NullableMatchInfo) Get() *MatchInfo {
	return v.value
}

func (v *NullableMatchInfo) Set(val *MatchInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchInfo(val *MatchInfo) *NullableMatchInfo {
	return &NullableMatchInfo{value: val, isSet: true}
}

func (v NullableMatchInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


