/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// OpenSearchBrowseResponse struct for OpenSearchBrowseResponse
type OpenSearchBrowseResponse struct {
	// The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.
	Items []BrowseResultItem `json:"items"`
}

// NewOpenSearchBrowseResponse instantiates a new OpenSearchBrowseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenSearchBrowseResponse(items []BrowseResultItem, ) *OpenSearchBrowseResponse {
	this := OpenSearchBrowseResponse{}
	this.Items = items
	return &this
}

// NewOpenSearchBrowseResponseWithDefaults instantiates a new OpenSearchBrowseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenSearchBrowseResponseWithDefaults() *OpenSearchBrowseResponse {
	this := OpenSearchBrowseResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *OpenSearchBrowseResponse) GetItems() []BrowseResultItem {
	if o == nil  {
		var ret []BrowseResultItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *OpenSearchBrowseResponse) GetItemsOk() (*[]BrowseResultItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *OpenSearchBrowseResponse) SetItems(v []BrowseResultItem) {
	o.Items = v
}

func (o OpenSearchBrowseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableOpenSearchBrowseResponse struct {
	value *OpenSearchBrowseResponse
	isSet bool
}

func (v NullableOpenSearchBrowseResponse) Get() *OpenSearchBrowseResponse {
	return v.value
}

func (v *NullableOpenSearchBrowseResponse) Set(val *OpenSearchBrowseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenSearchBrowseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenSearchBrowseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenSearchBrowseResponse(val *OpenSearchBrowseResponse) *NullableOpenSearchBrowseResponse {
	return &NullableOpenSearchBrowseResponse{value: val, isSet: true}
}

func (v NullableOpenSearchBrowseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenSearchBrowseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


