/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// ContactInformation struct for ContactInformation
type ContactInformation struct {
	// The list of place categories, this set of contact details refers to.
	Categories *[]Category `json:"categories,omitempty"`
	Phone *[]Contact `json:"phone,omitempty"`
	Mobile *[]Contact `json:"mobile,omitempty"`
	TollFree *[]Contact `json:"tollFree,omitempty"`
	Fax *[]Contact `json:"fax,omitempty"`
	Www *[]Contact `json:"www,omitempty"`
	Email *[]Contact `json:"email,omitempty"`
}

// NewContactInformation instantiates a new ContactInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactInformation() *ContactInformation {
	this := ContactInformation{}
	return &this
}

// NewContactInformationWithDefaults instantiates a new ContactInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactInformationWithDefaults() *ContactInformation {
	this := ContactInformation{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ContactInformation) GetCategories() []Category {
	if o == nil || o.Categories == nil {
		var ret []Category
		return ret
	}
	return *o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetCategoriesOk() (*[]Category, bool) {
	if o == nil || o.Categories == nil {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ContactInformation) HasCategories() bool {
	if o != nil && o.Categories != nil {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *ContactInformation) SetCategories(v []Category) {
	o.Categories = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *ContactInformation) GetPhone() []Contact {
	if o == nil || o.Phone == nil {
		var ret []Contact
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetPhoneOk() (*[]Contact, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *ContactInformation) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given []Contact and assigns it to the Phone field.
func (o *ContactInformation) SetPhone(v []Contact) {
	o.Phone = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *ContactInformation) GetMobile() []Contact {
	if o == nil || o.Mobile == nil {
		var ret []Contact
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetMobileOk() (*[]Contact, bool) {
	if o == nil || o.Mobile == nil {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *ContactInformation) HasMobile() bool {
	if o != nil && o.Mobile != nil {
		return true
	}

	return false
}

// SetMobile gets a reference to the given []Contact and assigns it to the Mobile field.
func (o *ContactInformation) SetMobile(v []Contact) {
	o.Mobile = &v
}

// GetTollFree returns the TollFree field value if set, zero value otherwise.
func (o *ContactInformation) GetTollFree() []Contact {
	if o == nil || o.TollFree == nil {
		var ret []Contact
		return ret
	}
	return *o.TollFree
}

// GetTollFreeOk returns a tuple with the TollFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetTollFreeOk() (*[]Contact, bool) {
	if o == nil || o.TollFree == nil {
		return nil, false
	}
	return o.TollFree, true
}

// HasTollFree returns a boolean if a field has been set.
func (o *ContactInformation) HasTollFree() bool {
	if o != nil && o.TollFree != nil {
		return true
	}

	return false
}

// SetTollFree gets a reference to the given []Contact and assigns it to the TollFree field.
func (o *ContactInformation) SetTollFree(v []Contact) {
	o.TollFree = &v
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *ContactInformation) GetFax() []Contact {
	if o == nil || o.Fax == nil {
		var ret []Contact
		return ret
	}
	return *o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetFaxOk() (*[]Contact, bool) {
	if o == nil || o.Fax == nil {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *ContactInformation) HasFax() bool {
	if o != nil && o.Fax != nil {
		return true
	}

	return false
}

// SetFax gets a reference to the given []Contact and assigns it to the Fax field.
func (o *ContactInformation) SetFax(v []Contact) {
	o.Fax = &v
}

// GetWww returns the Www field value if set, zero value otherwise.
func (o *ContactInformation) GetWww() []Contact {
	if o == nil || o.Www == nil {
		var ret []Contact
		return ret
	}
	return *o.Www
}

// GetWwwOk returns a tuple with the Www field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetWwwOk() (*[]Contact, bool) {
	if o == nil || o.Www == nil {
		return nil, false
	}
	return o.Www, true
}

// HasWww returns a boolean if a field has been set.
func (o *ContactInformation) HasWww() bool {
	if o != nil && o.Www != nil {
		return true
	}

	return false
}

// SetWww gets a reference to the given []Contact and assigns it to the Www field.
func (o *ContactInformation) SetWww(v []Contact) {
	o.Www = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ContactInformation) GetEmail() []Contact {
	if o == nil || o.Email == nil {
		var ret []Contact
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetEmailOk() (*[]Contact, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ContactInformation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given []Contact and assigns it to the Email field.
func (o *ContactInformation) SetEmail(v []Contact) {
	o.Email = &v
}

func (o ContactInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Categories != nil {
		toSerialize["categories"] = o.Categories
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.Mobile != nil {
		toSerialize["mobile"] = o.Mobile
	}
	if o.TollFree != nil {
		toSerialize["tollFree"] = o.TollFree
	}
	if o.Fax != nil {
		toSerialize["fax"] = o.Fax
	}
	if o.Www != nil {
		toSerialize["www"] = o.Www
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableContactInformation struct {
	value *ContactInformation
	isSet bool
}

func (v NullableContactInformation) Get() *ContactInformation {
	return v.value
}

func (v *NullableContactInformation) Set(val *ContactInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableContactInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableContactInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactInformation(val *ContactInformation) *NullableContactInformation {
	return &NullableContactInformation{value: val, isSet: true}
}

func (v NullableContactInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


