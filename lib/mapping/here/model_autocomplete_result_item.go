/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// AutocompleteResultItem struct for AutocompleteResultItem
type AutocompleteResultItem struct {
	// The unified display name of this result item. The result title is composed so that the customer application can use it to render the suggestions with highlighting. It is build in a unified way for all the countries starting from the country name and down to the address line. It is build out of the address components that are important for the end-user to recognize and eventually to choose a result and includes all the input terms. For example: \"Germany, 32547, Bad Oeynhausen, Schulstra√üe 4\"
	Title string `json:"title"`
	// The unique identifier for the result item. This ID can be used for a Look Up by ID search as well.
	Id *string `json:"id,omitempty"`
	// The preferred language of address elements in the result.
	Language *string `json:"language,omitempty"`
	// ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query
	PoliticalView *string `json:"politicalView,omitempty"`
	// WARNING: The resultType values 'intersection' and 'postalCodePoint' are in BETA state
	ResultType *string `json:"resultType,omitempty"`
	HouseNumberType *string `json:"houseNumberType,omitempty"`
	LocalityType *string `json:"localityType,omitempty"`
	AdministrativeAreaType *string `json:"administrativeAreaType,omitempty"`
	// Detailed address of the result item.
	Address Address `json:"address"`
	// The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".  When searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.
	Distance *int64 `json:"distance,omitempty"`
	// Describes how the parts of the response element matched the input query
	Highlights *TitleAndAddressHighlighting `json:"highlights,omitempty"`
	// Street Details (only rendered if 'show=streetInfo' is provided.)
	StreetInfo *[]StreetInfo `json:"streetInfo,omitempty"`
}

// NewAutocompleteResultItem instantiates a new AutocompleteResultItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutocompleteResultItem(title string, address Address, ) *AutocompleteResultItem {
	this := AutocompleteResultItem{}
	this.Title = title
	this.Address = address
	return &this
}

// NewAutocompleteResultItemWithDefaults instantiates a new AutocompleteResultItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutocompleteResultItemWithDefaults() *AutocompleteResultItem {
	this := AutocompleteResultItem{}
	return &this
}

// GetTitle returns the Title field value
func (o *AutocompleteResultItem) GetTitle() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *AutocompleteResultItem) SetTitle(v string) {
	o.Title = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AutocompleteResultItem) SetId(v string) {
	o.Id = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AutocompleteResultItem) SetLanguage(v string) {
	o.Language = &v
}

// GetPoliticalView returns the PoliticalView field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetPoliticalView() string {
	if o == nil || o.PoliticalView == nil {
		var ret string
		return ret
	}
	return *o.PoliticalView
}

// GetPoliticalViewOk returns a tuple with the PoliticalView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetPoliticalViewOk() (*string, bool) {
	if o == nil || o.PoliticalView == nil {
		return nil, false
	}
	return o.PoliticalView, true
}

// HasPoliticalView returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasPoliticalView() bool {
	if o != nil && o.PoliticalView != nil {
		return true
	}

	return false
}

// SetPoliticalView gets a reference to the given string and assigns it to the PoliticalView field.
func (o *AutocompleteResultItem) SetPoliticalView(v string) {
	o.PoliticalView = &v
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetResultType() string {
	if o == nil || o.ResultType == nil {
		var ret string
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetResultTypeOk() (*string, bool) {
	if o == nil || o.ResultType == nil {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasResultType() bool {
	if o != nil && o.ResultType != nil {
		return true
	}

	return false
}

// SetResultType gets a reference to the given string and assigns it to the ResultType field.
func (o *AutocompleteResultItem) SetResultType(v string) {
	o.ResultType = &v
}

// GetHouseNumberType returns the HouseNumberType field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetHouseNumberType() string {
	if o == nil || o.HouseNumberType == nil {
		var ret string
		return ret
	}
	return *o.HouseNumberType
}

// GetHouseNumberTypeOk returns a tuple with the HouseNumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetHouseNumberTypeOk() (*string, bool) {
	if o == nil || o.HouseNumberType == nil {
		return nil, false
	}
	return o.HouseNumberType, true
}

// HasHouseNumberType returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasHouseNumberType() bool {
	if o != nil && o.HouseNumberType != nil {
		return true
	}

	return false
}

// SetHouseNumberType gets a reference to the given string and assigns it to the HouseNumberType field.
func (o *AutocompleteResultItem) SetHouseNumberType(v string) {
	o.HouseNumberType = &v
}

// GetLocalityType returns the LocalityType field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetLocalityType() string {
	if o == nil || o.LocalityType == nil {
		var ret string
		return ret
	}
	return *o.LocalityType
}

// GetLocalityTypeOk returns a tuple with the LocalityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetLocalityTypeOk() (*string, bool) {
	if o == nil || o.LocalityType == nil {
		return nil, false
	}
	return o.LocalityType, true
}

// HasLocalityType returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasLocalityType() bool {
	if o != nil && o.LocalityType != nil {
		return true
	}

	return false
}

// SetLocalityType gets a reference to the given string and assigns it to the LocalityType field.
func (o *AutocompleteResultItem) SetLocalityType(v string) {
	o.LocalityType = &v
}

// GetAdministrativeAreaType returns the AdministrativeAreaType field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetAdministrativeAreaType() string {
	if o == nil || o.AdministrativeAreaType == nil {
		var ret string
		return ret
	}
	return *o.AdministrativeAreaType
}

// GetAdministrativeAreaTypeOk returns a tuple with the AdministrativeAreaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetAdministrativeAreaTypeOk() (*string, bool) {
	if o == nil || o.AdministrativeAreaType == nil {
		return nil, false
	}
	return o.AdministrativeAreaType, true
}

// HasAdministrativeAreaType returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasAdministrativeAreaType() bool {
	if o != nil && o.AdministrativeAreaType != nil {
		return true
	}

	return false
}

// SetAdministrativeAreaType gets a reference to the given string and assigns it to the AdministrativeAreaType field.
func (o *AutocompleteResultItem) SetAdministrativeAreaType(v string) {
	o.AdministrativeAreaType = &v
}

// GetAddress returns the Address field value
func (o *AutocompleteResultItem) GetAddress() Address {
	if o == nil  {
		var ret Address
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetAddressOk() (*Address, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AutocompleteResultItem) SetAddress(v Address) {
	o.Address = v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetDistance() int64 {
	if o == nil || o.Distance == nil {
		var ret int64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetDistanceOk() (*int64, bool) {
	if o == nil || o.Distance == nil {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasDistance() bool {
	if o != nil && o.Distance != nil {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int64 and assigns it to the Distance field.
func (o *AutocompleteResultItem) SetDistance(v int64) {
	o.Distance = &v
}

// GetHighlights returns the Highlights field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetHighlights() TitleAndAddressHighlighting {
	if o == nil || o.Highlights == nil {
		var ret TitleAndAddressHighlighting
		return ret
	}
	return *o.Highlights
}

// GetHighlightsOk returns a tuple with the Highlights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetHighlightsOk() (*TitleAndAddressHighlighting, bool) {
	if o == nil || o.Highlights == nil {
		return nil, false
	}
	return o.Highlights, true
}

// HasHighlights returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasHighlights() bool {
	if o != nil && o.Highlights != nil {
		return true
	}

	return false
}

// SetHighlights gets a reference to the given TitleAndAddressHighlighting and assigns it to the Highlights field.
func (o *AutocompleteResultItem) SetHighlights(v TitleAndAddressHighlighting) {
	o.Highlights = &v
}

// GetStreetInfo returns the StreetInfo field value if set, zero value otherwise.
func (o *AutocompleteResultItem) GetStreetInfo() []StreetInfo {
	if o == nil || o.StreetInfo == nil {
		var ret []StreetInfo
		return ret
	}
	return *o.StreetInfo
}

// GetStreetInfoOk returns a tuple with the StreetInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResultItem) GetStreetInfoOk() (*[]StreetInfo, bool) {
	if o == nil || o.StreetInfo == nil {
		return nil, false
	}
	return o.StreetInfo, true
}

// HasStreetInfo returns a boolean if a field has been set.
func (o *AutocompleteResultItem) HasStreetInfo() bool {
	if o != nil && o.StreetInfo != nil {
		return true
	}

	return false
}

// SetStreetInfo gets a reference to the given []StreetInfo and assigns it to the StreetInfo field.
func (o *AutocompleteResultItem) SetStreetInfo(v []StreetInfo) {
	o.StreetInfo = &v
}

func (o AutocompleteResultItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.PoliticalView != nil {
		toSerialize["politicalView"] = o.PoliticalView
	}
	if o.ResultType != nil {
		toSerialize["resultType"] = o.ResultType
	}
	if o.HouseNumberType != nil {
		toSerialize["houseNumberType"] = o.HouseNumberType
	}
	if o.LocalityType != nil {
		toSerialize["localityType"] = o.LocalityType
	}
	if o.AdministrativeAreaType != nil {
		toSerialize["administrativeAreaType"] = o.AdministrativeAreaType
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.Distance != nil {
		toSerialize["distance"] = o.Distance
	}
	if o.Highlights != nil {
		toSerialize["highlights"] = o.Highlights
	}
	if o.StreetInfo != nil {
		toSerialize["streetInfo"] = o.StreetInfo
	}
	return json.Marshal(toSerialize)
}

type NullableAutocompleteResultItem struct {
	value *AutocompleteResultItem
	isSet bool
}

func (v NullableAutocompleteResultItem) Get() *AutocompleteResultItem {
	return v.value
}

func (v *NullableAutocompleteResultItem) Set(val *AutocompleteResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAutocompleteResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAutocompleteResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutocompleteResultItem(val *AutocompleteResultItem) *NullableAutocompleteResultItem {
	return &NullableAutocompleteResultItem{value: val, isSet: true}
}

func (v NullableAutocompleteResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutocompleteResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


