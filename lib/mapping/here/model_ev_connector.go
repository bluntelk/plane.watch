/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// EvConnector struct for EvConnector
type EvConnector struct {
	// The EV charge point operator
	SupplierName *string `json:"supplierName,omitempty"`
	// Id and name element pair representing the connector type in the EV pool group. For more information on the current connector types, see the [connectorTypes](https://developer.here.com/documentation/charging-stations/dev_guide/topics/resource-type-connector-types.html) values in the HERE EV Charge Points API.
	ConnectorType *EvNameId `json:"connectorType,omitempty"`
	// Details on type of power feed with respect to [SAE J1772](https://en.wikipedia.org/wiki/SAE_J1772#Charging) standard.
	PowerFeedType *EvNameId `json:"powerFeedType,omitempty"`
	// Maximum charge power (in kilowatt) of connectors in connectors group.
	MaxPowerLevel *float64 `json:"maxPowerLevel,omitempty"`
	// Connectors group additional charging information
	ChargingPoint *EvChargingPoint `json:"chargingPoint,omitempty"`
}

// NewEvConnector instantiates a new EvConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvConnector() *EvConnector {
	this := EvConnector{}
	return &this
}

// NewEvConnectorWithDefaults instantiates a new EvConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvConnectorWithDefaults() *EvConnector {
	this := EvConnector{}
	return &this
}

// GetSupplierName returns the SupplierName field value if set, zero value otherwise.
func (o *EvConnector) GetSupplierName() string {
	if o == nil || o.SupplierName == nil {
		var ret string
		return ret
	}
	return *o.SupplierName
}

// GetSupplierNameOk returns a tuple with the SupplierName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvConnector) GetSupplierNameOk() (*string, bool) {
	if o == nil || o.SupplierName == nil {
		return nil, false
	}
	return o.SupplierName, true
}

// HasSupplierName returns a boolean if a field has been set.
func (o *EvConnector) HasSupplierName() bool {
	if o != nil && o.SupplierName != nil {
		return true
	}

	return false
}

// SetSupplierName gets a reference to the given string and assigns it to the SupplierName field.
func (o *EvConnector) SetSupplierName(v string) {
	o.SupplierName = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *EvConnector) GetConnectorType() EvNameId {
	if o == nil || o.ConnectorType == nil {
		var ret EvNameId
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvConnector) GetConnectorTypeOk() (*EvNameId, bool) {
	if o == nil || o.ConnectorType == nil {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *EvConnector) HasConnectorType() bool {
	if o != nil && o.ConnectorType != nil {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given EvNameId and assigns it to the ConnectorType field.
func (o *EvConnector) SetConnectorType(v EvNameId) {
	o.ConnectorType = &v
}

// GetPowerFeedType returns the PowerFeedType field value if set, zero value otherwise.
func (o *EvConnector) GetPowerFeedType() EvNameId {
	if o == nil || o.PowerFeedType == nil {
		var ret EvNameId
		return ret
	}
	return *o.PowerFeedType
}

// GetPowerFeedTypeOk returns a tuple with the PowerFeedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvConnector) GetPowerFeedTypeOk() (*EvNameId, bool) {
	if o == nil || o.PowerFeedType == nil {
		return nil, false
	}
	return o.PowerFeedType, true
}

// HasPowerFeedType returns a boolean if a field has been set.
func (o *EvConnector) HasPowerFeedType() bool {
	if o != nil && o.PowerFeedType != nil {
		return true
	}

	return false
}

// SetPowerFeedType gets a reference to the given EvNameId and assigns it to the PowerFeedType field.
func (o *EvConnector) SetPowerFeedType(v EvNameId) {
	o.PowerFeedType = &v
}

// GetMaxPowerLevel returns the MaxPowerLevel field value if set, zero value otherwise.
func (o *EvConnector) GetMaxPowerLevel() float64 {
	if o == nil || o.MaxPowerLevel == nil {
		var ret float64
		return ret
	}
	return *o.MaxPowerLevel
}

// GetMaxPowerLevelOk returns a tuple with the MaxPowerLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvConnector) GetMaxPowerLevelOk() (*float64, bool) {
	if o == nil || o.MaxPowerLevel == nil {
		return nil, false
	}
	return o.MaxPowerLevel, true
}

// HasMaxPowerLevel returns a boolean if a field has been set.
func (o *EvConnector) HasMaxPowerLevel() bool {
	if o != nil && o.MaxPowerLevel != nil {
		return true
	}

	return false
}

// SetMaxPowerLevel gets a reference to the given float64 and assigns it to the MaxPowerLevel field.
func (o *EvConnector) SetMaxPowerLevel(v float64) {
	o.MaxPowerLevel = &v
}

// GetChargingPoint returns the ChargingPoint field value if set, zero value otherwise.
func (o *EvConnector) GetChargingPoint() EvChargingPoint {
	if o == nil || o.ChargingPoint == nil {
		var ret EvChargingPoint
		return ret
	}
	return *o.ChargingPoint
}

// GetChargingPointOk returns a tuple with the ChargingPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvConnector) GetChargingPointOk() (*EvChargingPoint, bool) {
	if o == nil || o.ChargingPoint == nil {
		return nil, false
	}
	return o.ChargingPoint, true
}

// HasChargingPoint returns a boolean if a field has been set.
func (o *EvConnector) HasChargingPoint() bool {
	if o != nil && o.ChargingPoint != nil {
		return true
	}

	return false
}

// SetChargingPoint gets a reference to the given EvChargingPoint and assigns it to the ChargingPoint field.
func (o *EvConnector) SetChargingPoint(v EvChargingPoint) {
	o.ChargingPoint = &v
}

func (o EvConnector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SupplierName != nil {
		toSerialize["supplierName"] = o.SupplierName
	}
	if o.ConnectorType != nil {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if o.PowerFeedType != nil {
		toSerialize["powerFeedType"] = o.PowerFeedType
	}
	if o.MaxPowerLevel != nil {
		toSerialize["maxPowerLevel"] = o.MaxPowerLevel
	}
	if o.ChargingPoint != nil {
		toSerialize["chargingPoint"] = o.ChargingPoint
	}
	return json.Marshal(toSerialize)
}

type NullableEvConnector struct {
	value *EvConnector
	isSet bool
}

func (v NullableEvConnector) Get() *EvConnector {
	return v.value
}

func (v *NullableEvConnector) Set(val *EvConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableEvConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableEvConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvConnector(val *EvConnector) *NullableEvConnector {
	return &NullableEvConnector{value: val, isSet: true}
}

func (v NullableEvConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


