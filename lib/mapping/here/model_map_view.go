/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// MapView struct for MapView
type MapView struct {
	// Longitude of the western-side of the box. For example: \"8.80068\"
	West float64 `json:"west"`
	// Latitude of the southern-side of the box. For example: \"52.19333\"
	South float64 `json:"south"`
	// Longitude of the eastern-side of the box. For example: \"8.8167\"
	East float64 `json:"east"`
	// Latitude of the northern-side of the box. For example: \"52.19555\"
	North float64 `json:"north"`
}

// NewMapView instantiates a new MapView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapView(west float64, south float64, east float64, north float64, ) *MapView {
	this := MapView{}
	this.West = west
	this.South = south
	this.East = east
	this.North = north
	return &this
}

// NewMapViewWithDefaults instantiates a new MapView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapViewWithDefaults() *MapView {
	this := MapView{}
	return &this
}

// GetWest returns the West field value
func (o *MapView) GetWest() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.West
}

// GetWestOk returns a tuple with the West field value
// and a boolean to check if the value has been set.
func (o *MapView) GetWestOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.West, true
}

// SetWest sets field value
func (o *MapView) SetWest(v float64) {
	o.West = v
}

// GetSouth returns the South field value
func (o *MapView) GetSouth() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.South
}

// GetSouthOk returns a tuple with the South field value
// and a boolean to check if the value has been set.
func (o *MapView) GetSouthOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.South, true
}

// SetSouth sets field value
func (o *MapView) SetSouth(v float64) {
	o.South = v
}

// GetEast returns the East field value
func (o *MapView) GetEast() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.East
}

// GetEastOk returns a tuple with the East field value
// and a boolean to check if the value has been set.
func (o *MapView) GetEastOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.East, true
}

// SetEast sets field value
func (o *MapView) SetEast(v float64) {
	o.East = v
}

// GetNorth returns the North field value
func (o *MapView) GetNorth() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.North
}

// GetNorthOk returns a tuple with the North field value
// and a boolean to check if the value has been set.
func (o *MapView) GetNorthOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.North, true
}

// SetNorth sets field value
func (o *MapView) SetNorth(v float64) {
	o.North = v
}

func (o MapView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["west"] = o.West
	}
	if true {
		toSerialize["south"] = o.South
	}
	if true {
		toSerialize["east"] = o.East
	}
	if true {
		toSerialize["north"] = o.North
	}
	return json.Marshal(toSerialize)
}

type NullableMapView struct {
	value *MapView
	isSet bool
}

func (v NullableMapView) Get() *MapView {
	return v.value
}

func (v *NullableMapView) Set(val *MapView) {
	v.value = val
	v.isSet = true
}

func (v NullableMapView) IsSet() bool {
	return v.isSet
}

func (v *NullableMapView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapView(val *MapView) *NullableMapView {
	return &NullableMapView{value: val, isSet: true}
}

func (v NullableMapView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


