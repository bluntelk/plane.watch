/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// Parsing struct for Parsing
type Parsing struct {
	// Place name matches
	PlaceName *[]MatchInfo `json:"placeName,omitempty"`
	// Country matches
	Country *[]MatchInfo `json:"country,omitempty"`
	// State matches
	State *[]MatchInfo `json:"state,omitempty"`
	// County matches
	County *[]MatchInfo `json:"county,omitempty"`
	// City matches
	City *[]MatchInfo `json:"city,omitempty"`
	// District matches
	District *[]MatchInfo `json:"district,omitempty"`
	// Subdistrict matches
	Subdistrict *[]MatchInfo `json:"subdistrict,omitempty"`
	// Street matches
	Street *[]MatchInfo `json:"street,omitempty"`
	// Block matches
	Block *[]MatchInfo `json:"block,omitempty"`
	// Subblock matches
	Subblock *[]MatchInfo `json:"subblock,omitempty"`
	// HouseNumber matches
	HouseNumber *[]MatchInfo `json:"houseNumber,omitempty"`
	// PostalCode matches
	PostalCode *[]MatchInfo `json:"postalCode,omitempty"`
	// Building matches
	Building *[]MatchInfo `json:"building,omitempty"`
	// secondaryUnits matches
	SecondaryUnits *[]MatchInfo `json:"secondaryUnits,omitempty"`
	// Ontology name matches
	OntologyName *[]MatchInfo `json:"ontologyName,omitempty"`
}

// NewParsing instantiates a new Parsing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsing() *Parsing {
	this := Parsing{}
	return &this
}

// NewParsingWithDefaults instantiates a new Parsing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsingWithDefaults() *Parsing {
	this := Parsing{}
	return &this
}

// GetPlaceName returns the PlaceName field value if set, zero value otherwise.
func (o *Parsing) GetPlaceName() []MatchInfo {
	if o == nil || o.PlaceName == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.PlaceName
}

// GetPlaceNameOk returns a tuple with the PlaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetPlaceNameOk() (*[]MatchInfo, bool) {
	if o == nil || o.PlaceName == nil {
		return nil, false
	}
	return o.PlaceName, true
}

// HasPlaceName returns a boolean if a field has been set.
func (o *Parsing) HasPlaceName() bool {
	if o != nil && o.PlaceName != nil {
		return true
	}

	return false
}

// SetPlaceName gets a reference to the given []MatchInfo and assigns it to the PlaceName field.
func (o *Parsing) SetPlaceName(v []MatchInfo) {
	o.PlaceName = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Parsing) GetCountry() []MatchInfo {
	if o == nil || o.Country == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetCountryOk() (*[]MatchInfo, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Parsing) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []MatchInfo and assigns it to the Country field.
func (o *Parsing) SetCountry(v []MatchInfo) {
	o.Country = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Parsing) GetState() []MatchInfo {
	if o == nil || o.State == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetStateOk() (*[]MatchInfo, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Parsing) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given []MatchInfo and assigns it to the State field.
func (o *Parsing) SetState(v []MatchInfo) {
	o.State = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *Parsing) GetCounty() []MatchInfo {
	if o == nil || o.County == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetCountyOk() (*[]MatchInfo, bool) {
	if o == nil || o.County == nil {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *Parsing) HasCounty() bool {
	if o != nil && o.County != nil {
		return true
	}

	return false
}

// SetCounty gets a reference to the given []MatchInfo and assigns it to the County field.
func (o *Parsing) SetCounty(v []MatchInfo) {
	o.County = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Parsing) GetCity() []MatchInfo {
	if o == nil || o.City == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetCityOk() (*[]MatchInfo, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Parsing) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given []MatchInfo and assigns it to the City field.
func (o *Parsing) SetCity(v []MatchInfo) {
	o.City = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *Parsing) GetDistrict() []MatchInfo {
	if o == nil || o.District == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetDistrictOk() (*[]MatchInfo, bool) {
	if o == nil || o.District == nil {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *Parsing) HasDistrict() bool {
	if o != nil && o.District != nil {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given []MatchInfo and assigns it to the District field.
func (o *Parsing) SetDistrict(v []MatchInfo) {
	o.District = &v
}

// GetSubdistrict returns the Subdistrict field value if set, zero value otherwise.
func (o *Parsing) GetSubdistrict() []MatchInfo {
	if o == nil || o.Subdistrict == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.Subdistrict
}

// GetSubdistrictOk returns a tuple with the Subdistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetSubdistrictOk() (*[]MatchInfo, bool) {
	if o == nil || o.Subdistrict == nil {
		return nil, false
	}
	return o.Subdistrict, true
}

// HasSubdistrict returns a boolean if a field has been set.
func (o *Parsing) HasSubdistrict() bool {
	if o != nil && o.Subdistrict != nil {
		return true
	}

	return false
}

// SetSubdistrict gets a reference to the given []MatchInfo and assigns it to the Subdistrict field.
func (o *Parsing) SetSubdistrict(v []MatchInfo) {
	o.Subdistrict = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *Parsing) GetStreet() []MatchInfo {
	if o == nil || o.Street == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetStreetOk() (*[]MatchInfo, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *Parsing) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given []MatchInfo and assigns it to the Street field.
func (o *Parsing) SetStreet(v []MatchInfo) {
	o.Street = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *Parsing) GetBlock() []MatchInfo {
	if o == nil || o.Block == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetBlockOk() (*[]MatchInfo, bool) {
	if o == nil || o.Block == nil {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *Parsing) HasBlock() bool {
	if o != nil && o.Block != nil {
		return true
	}

	return false
}

// SetBlock gets a reference to the given []MatchInfo and assigns it to the Block field.
func (o *Parsing) SetBlock(v []MatchInfo) {
	o.Block = &v
}

// GetSubblock returns the Subblock field value if set, zero value otherwise.
func (o *Parsing) GetSubblock() []MatchInfo {
	if o == nil || o.Subblock == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.Subblock
}

// GetSubblockOk returns a tuple with the Subblock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetSubblockOk() (*[]MatchInfo, bool) {
	if o == nil || o.Subblock == nil {
		return nil, false
	}
	return o.Subblock, true
}

// HasSubblock returns a boolean if a field has been set.
func (o *Parsing) HasSubblock() bool {
	if o != nil && o.Subblock != nil {
		return true
	}

	return false
}

// SetSubblock gets a reference to the given []MatchInfo and assigns it to the Subblock field.
func (o *Parsing) SetSubblock(v []MatchInfo) {
	o.Subblock = &v
}

// GetHouseNumber returns the HouseNumber field value if set, zero value otherwise.
func (o *Parsing) GetHouseNumber() []MatchInfo {
	if o == nil || o.HouseNumber == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.HouseNumber
}

// GetHouseNumberOk returns a tuple with the HouseNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetHouseNumberOk() (*[]MatchInfo, bool) {
	if o == nil || o.HouseNumber == nil {
		return nil, false
	}
	return o.HouseNumber, true
}

// HasHouseNumber returns a boolean if a field has been set.
func (o *Parsing) HasHouseNumber() bool {
	if o != nil && o.HouseNumber != nil {
		return true
	}

	return false
}

// SetHouseNumber gets a reference to the given []MatchInfo and assigns it to the HouseNumber field.
func (o *Parsing) SetHouseNumber(v []MatchInfo) {
	o.HouseNumber = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *Parsing) GetPostalCode() []MatchInfo {
	if o == nil || o.PostalCode == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetPostalCodeOk() (*[]MatchInfo, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *Parsing) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given []MatchInfo and assigns it to the PostalCode field.
func (o *Parsing) SetPostalCode(v []MatchInfo) {
	o.PostalCode = &v
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *Parsing) GetBuilding() []MatchInfo {
	if o == nil || o.Building == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetBuildingOk() (*[]MatchInfo, bool) {
	if o == nil || o.Building == nil {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *Parsing) HasBuilding() bool {
	if o != nil && o.Building != nil {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given []MatchInfo and assigns it to the Building field.
func (o *Parsing) SetBuilding(v []MatchInfo) {
	o.Building = &v
}

// GetSecondaryUnits returns the SecondaryUnits field value if set, zero value otherwise.
func (o *Parsing) GetSecondaryUnits() []MatchInfo {
	if o == nil || o.SecondaryUnits == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.SecondaryUnits
}

// GetSecondaryUnitsOk returns a tuple with the SecondaryUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetSecondaryUnitsOk() (*[]MatchInfo, bool) {
	if o == nil || o.SecondaryUnits == nil {
		return nil, false
	}
	return o.SecondaryUnits, true
}

// HasSecondaryUnits returns a boolean if a field has been set.
func (o *Parsing) HasSecondaryUnits() bool {
	if o != nil && o.SecondaryUnits != nil {
		return true
	}

	return false
}

// SetSecondaryUnits gets a reference to the given []MatchInfo and assigns it to the SecondaryUnits field.
func (o *Parsing) SetSecondaryUnits(v []MatchInfo) {
	o.SecondaryUnits = &v
}

// GetOntologyName returns the OntologyName field value if set, zero value otherwise.
func (o *Parsing) GetOntologyName() []MatchInfo {
	if o == nil || o.OntologyName == nil {
		var ret []MatchInfo
		return ret
	}
	return *o.OntologyName
}

// GetOntologyNameOk returns a tuple with the OntologyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parsing) GetOntologyNameOk() (*[]MatchInfo, bool) {
	if o == nil || o.OntologyName == nil {
		return nil, false
	}
	return o.OntologyName, true
}

// HasOntologyName returns a boolean if a field has been set.
func (o *Parsing) HasOntologyName() bool {
	if o != nil && o.OntologyName != nil {
		return true
	}

	return false
}

// SetOntologyName gets a reference to the given []MatchInfo and assigns it to the OntologyName field.
func (o *Parsing) SetOntologyName(v []MatchInfo) {
	o.OntologyName = &v
}

func (o Parsing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PlaceName != nil {
		toSerialize["placeName"] = o.PlaceName
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.County != nil {
		toSerialize["county"] = o.County
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.District != nil {
		toSerialize["district"] = o.District
	}
	if o.Subdistrict != nil {
		toSerialize["subdistrict"] = o.Subdistrict
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.Block != nil {
		toSerialize["block"] = o.Block
	}
	if o.Subblock != nil {
		toSerialize["subblock"] = o.Subblock
	}
	if o.HouseNumber != nil {
		toSerialize["houseNumber"] = o.HouseNumber
	}
	if o.PostalCode != nil {
		toSerialize["postalCode"] = o.PostalCode
	}
	if o.Building != nil {
		toSerialize["building"] = o.Building
	}
	if o.SecondaryUnits != nil {
		toSerialize["secondaryUnits"] = o.SecondaryUnits
	}
	if o.OntologyName != nil {
		toSerialize["ontologyName"] = o.OntologyName
	}
	return json.Marshal(toSerialize)
}

type NullableParsing struct {
	value *Parsing
	isSet bool
}

func (v NullableParsing) Get() *Parsing {
	return v.value
}

func (v *NullableParsing) Set(val *Parsing) {
	v.value = val
	v.isSet = true
}

func (v NullableParsing) IsSet() bool {
	return v.isSet
}

func (v *NullableParsing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsing(val *Parsing) *NullableParsing {
	return &NullableParsing{value: val, isSet: true}
}

func (v NullableParsing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


