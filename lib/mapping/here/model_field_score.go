/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// FieldScore struct for FieldScore
type FieldScore struct {
	// Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.
	Country *float64 `json:"country,omitempty"`
	// Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.
	CountryCode *float64 `json:"countryCode,omitempty"`
	// Indicates how good the result state name matches to the freeform or qualified input.
	State *float64 `json:"state,omitempty"`
	// Indicates how good the result state code matches to the freeform or qualified input.
	StateCode *float64 `json:"stateCode,omitempty"`
	// Indicates how good the result county name matches to the freeform or qualified input.
	County *float64 `json:"county,omitempty"`
	// Indicates how good the result county code matches to the freeform or qualified input.
	CountyCode *float64 `json:"countyCode,omitempty"`
	// Indicates how good the result city name matches to the freeform or qualified input.
	City *float64 `json:"city,omitempty"`
	// Indicates how good the result district name matches to the freeform or qualified input.
	District *float64 `json:"district,omitempty"`
	// Indicates how good the result sub-district name matches to the freeform or qualified input.
	Subdistrict *float64 `json:"subdistrict,omitempty"`
	// Indicates how good the result street names match to the freeform or qualified input. If the input contains multiple street names, the field score is calculated and returned for each of them individually.
	Streets *[]float64 `json:"streets,omitempty"`
	// Indicates how good the result block name matches to the freeform or qualified input.
	Block *float64 `json:"block,omitempty"`
	// Indicates how good the result sub-block name matches to the freeform or qualified input.
	Subblock *float64 `json:"subblock,omitempty"`
	// Indicates how good the result house number matches to the freeform or qualified input. It may happen, that the house number, which one is looking for, is not yet in the map data. For such cases, the /geocode returns the nearest known house number on the same street. This represents the numeric difference between the requested and the returned house numbers.
	HouseNumber *float64 `json:"houseNumber,omitempty"`
	// Indicates how good the result postal code matches to the freeform or qualified input.
	PostalCode *float64 `json:"postalCode,omitempty"`
	// Indicates how good the result building name matches to the freeform or qualified input.
	Building *float64 `json:"building,omitempty"`
	// Indicates how good the result unit (such as a micro point address) matches to the freeform or qualified input.
	Unit *float64 `json:"unit,omitempty"`
	// Indicates how good the result place name matches to the freeform or qualified input.
	PlaceName *float64 `json:"placeName,omitempty"`
	// Indicates how good the result ontology name matches to the freeform or qualified input.
	OntologyName *float64 `json:"ontologyName,omitempty"`
}

// NewFieldScore instantiates a new FieldScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldScore() *FieldScore {
	this := FieldScore{}
	return &this
}

// NewFieldScoreWithDefaults instantiates a new FieldScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldScoreWithDefaults() *FieldScore {
	this := FieldScore{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *FieldScore) GetCountry() float64 {
	if o == nil || o.Country == nil {
		var ret float64
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetCountryOk() (*float64, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *FieldScore) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given float64 and assigns it to the Country field.
func (o *FieldScore) SetCountry(v float64) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *FieldScore) GetCountryCode() float64 {
	if o == nil || o.CountryCode == nil {
		var ret float64
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetCountryCodeOk() (*float64, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *FieldScore) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given float64 and assigns it to the CountryCode field.
func (o *FieldScore) SetCountryCode(v float64) {
	o.CountryCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FieldScore) GetState() float64 {
	if o == nil || o.State == nil {
		var ret float64
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetStateOk() (*float64, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FieldScore) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given float64 and assigns it to the State field.
func (o *FieldScore) SetState(v float64) {
	o.State = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *FieldScore) GetStateCode() float64 {
	if o == nil || o.StateCode == nil {
		var ret float64
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetStateCodeOk() (*float64, bool) {
	if o == nil || o.StateCode == nil {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *FieldScore) HasStateCode() bool {
	if o != nil && o.StateCode != nil {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given float64 and assigns it to the StateCode field.
func (o *FieldScore) SetStateCode(v float64) {
	o.StateCode = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *FieldScore) GetCounty() float64 {
	if o == nil || o.County == nil {
		var ret float64
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetCountyOk() (*float64, bool) {
	if o == nil || o.County == nil {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *FieldScore) HasCounty() bool {
	if o != nil && o.County != nil {
		return true
	}

	return false
}

// SetCounty gets a reference to the given float64 and assigns it to the County field.
func (o *FieldScore) SetCounty(v float64) {
	o.County = &v
}

// GetCountyCode returns the CountyCode field value if set, zero value otherwise.
func (o *FieldScore) GetCountyCode() float64 {
	if o == nil || o.CountyCode == nil {
		var ret float64
		return ret
	}
	return *o.CountyCode
}

// GetCountyCodeOk returns a tuple with the CountyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetCountyCodeOk() (*float64, bool) {
	if o == nil || o.CountyCode == nil {
		return nil, false
	}
	return o.CountyCode, true
}

// HasCountyCode returns a boolean if a field has been set.
func (o *FieldScore) HasCountyCode() bool {
	if o != nil && o.CountyCode != nil {
		return true
	}

	return false
}

// SetCountyCode gets a reference to the given float64 and assigns it to the CountyCode field.
func (o *FieldScore) SetCountyCode(v float64) {
	o.CountyCode = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *FieldScore) GetCity() float64 {
	if o == nil || o.City == nil {
		var ret float64
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetCityOk() (*float64, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *FieldScore) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given float64 and assigns it to the City field.
func (o *FieldScore) SetCity(v float64) {
	o.City = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *FieldScore) GetDistrict() float64 {
	if o == nil || o.District == nil {
		var ret float64
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetDistrictOk() (*float64, bool) {
	if o == nil || o.District == nil {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *FieldScore) HasDistrict() bool {
	if o != nil && o.District != nil {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given float64 and assigns it to the District field.
func (o *FieldScore) SetDistrict(v float64) {
	o.District = &v
}

// GetSubdistrict returns the Subdistrict field value if set, zero value otherwise.
func (o *FieldScore) GetSubdistrict() float64 {
	if o == nil || o.Subdistrict == nil {
		var ret float64
		return ret
	}
	return *o.Subdistrict
}

// GetSubdistrictOk returns a tuple with the Subdistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetSubdistrictOk() (*float64, bool) {
	if o == nil || o.Subdistrict == nil {
		return nil, false
	}
	return o.Subdistrict, true
}

// HasSubdistrict returns a boolean if a field has been set.
func (o *FieldScore) HasSubdistrict() bool {
	if o != nil && o.Subdistrict != nil {
		return true
	}

	return false
}

// SetSubdistrict gets a reference to the given float64 and assigns it to the Subdistrict field.
func (o *FieldScore) SetSubdistrict(v float64) {
	o.Subdistrict = &v
}

// GetStreets returns the Streets field value if set, zero value otherwise.
func (o *FieldScore) GetStreets() []float64 {
	if o == nil || o.Streets == nil {
		var ret []float64
		return ret
	}
	return *o.Streets
}

// GetStreetsOk returns a tuple with the Streets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetStreetsOk() (*[]float64, bool) {
	if o == nil || o.Streets == nil {
		return nil, false
	}
	return o.Streets, true
}

// HasStreets returns a boolean if a field has been set.
func (o *FieldScore) HasStreets() bool {
	if o != nil && o.Streets != nil {
		return true
	}

	return false
}

// SetStreets gets a reference to the given []float64 and assigns it to the Streets field.
func (o *FieldScore) SetStreets(v []float64) {
	o.Streets = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *FieldScore) GetBlock() float64 {
	if o == nil || o.Block == nil {
		var ret float64
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetBlockOk() (*float64, bool) {
	if o == nil || o.Block == nil {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *FieldScore) HasBlock() bool {
	if o != nil && o.Block != nil {
		return true
	}

	return false
}

// SetBlock gets a reference to the given float64 and assigns it to the Block field.
func (o *FieldScore) SetBlock(v float64) {
	o.Block = &v
}

// GetSubblock returns the Subblock field value if set, zero value otherwise.
func (o *FieldScore) GetSubblock() float64 {
	if o == nil || o.Subblock == nil {
		var ret float64
		return ret
	}
	return *o.Subblock
}

// GetSubblockOk returns a tuple with the Subblock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetSubblockOk() (*float64, bool) {
	if o == nil || o.Subblock == nil {
		return nil, false
	}
	return o.Subblock, true
}

// HasSubblock returns a boolean if a field has been set.
func (o *FieldScore) HasSubblock() bool {
	if o != nil && o.Subblock != nil {
		return true
	}

	return false
}

// SetSubblock gets a reference to the given float64 and assigns it to the Subblock field.
func (o *FieldScore) SetSubblock(v float64) {
	o.Subblock = &v
}

// GetHouseNumber returns the HouseNumber field value if set, zero value otherwise.
func (o *FieldScore) GetHouseNumber() float64 {
	if o == nil || o.HouseNumber == nil {
		var ret float64
		return ret
	}
	return *o.HouseNumber
}

// GetHouseNumberOk returns a tuple with the HouseNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetHouseNumberOk() (*float64, bool) {
	if o == nil || o.HouseNumber == nil {
		return nil, false
	}
	return o.HouseNumber, true
}

// HasHouseNumber returns a boolean if a field has been set.
func (o *FieldScore) HasHouseNumber() bool {
	if o != nil && o.HouseNumber != nil {
		return true
	}

	return false
}

// SetHouseNumber gets a reference to the given float64 and assigns it to the HouseNumber field.
func (o *FieldScore) SetHouseNumber(v float64) {
	o.HouseNumber = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *FieldScore) GetPostalCode() float64 {
	if o == nil || o.PostalCode == nil {
		var ret float64
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetPostalCodeOk() (*float64, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *FieldScore) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given float64 and assigns it to the PostalCode field.
func (o *FieldScore) SetPostalCode(v float64) {
	o.PostalCode = &v
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *FieldScore) GetBuilding() float64 {
	if o == nil || o.Building == nil {
		var ret float64
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetBuildingOk() (*float64, bool) {
	if o == nil || o.Building == nil {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *FieldScore) HasBuilding() bool {
	if o != nil && o.Building != nil {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given float64 and assigns it to the Building field.
func (o *FieldScore) SetBuilding(v float64) {
	o.Building = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *FieldScore) GetUnit() float64 {
	if o == nil || o.Unit == nil {
		var ret float64
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetUnitOk() (*float64, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *FieldScore) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given float64 and assigns it to the Unit field.
func (o *FieldScore) SetUnit(v float64) {
	o.Unit = &v
}

// GetPlaceName returns the PlaceName field value if set, zero value otherwise.
func (o *FieldScore) GetPlaceName() float64 {
	if o == nil || o.PlaceName == nil {
		var ret float64
		return ret
	}
	return *o.PlaceName
}

// GetPlaceNameOk returns a tuple with the PlaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetPlaceNameOk() (*float64, bool) {
	if o == nil || o.PlaceName == nil {
		return nil, false
	}
	return o.PlaceName, true
}

// HasPlaceName returns a boolean if a field has been set.
func (o *FieldScore) HasPlaceName() bool {
	if o != nil && o.PlaceName != nil {
		return true
	}

	return false
}

// SetPlaceName gets a reference to the given float64 and assigns it to the PlaceName field.
func (o *FieldScore) SetPlaceName(v float64) {
	o.PlaceName = &v
}

// GetOntologyName returns the OntologyName field value if set, zero value otherwise.
func (o *FieldScore) GetOntologyName() float64 {
	if o == nil || o.OntologyName == nil {
		var ret float64
		return ret
	}
	return *o.OntologyName
}

// GetOntologyNameOk returns a tuple with the OntologyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldScore) GetOntologyNameOk() (*float64, bool) {
	if o == nil || o.OntologyName == nil {
		return nil, false
	}
	return o.OntologyName, true
}

// HasOntologyName returns a boolean if a field has been set.
func (o *FieldScore) HasOntologyName() bool {
	if o != nil && o.OntologyName != nil {
		return true
	}

	return false
}

// SetOntologyName gets a reference to the given float64 and assigns it to the OntologyName field.
func (o *FieldScore) SetOntologyName(v float64) {
	o.OntologyName = &v
}

func (o FieldScore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.CountryCode != nil {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.StateCode != nil {
		toSerialize["stateCode"] = o.StateCode
	}
	if o.County != nil {
		toSerialize["county"] = o.County
	}
	if o.CountyCode != nil {
		toSerialize["countyCode"] = o.CountyCode
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.District != nil {
		toSerialize["district"] = o.District
	}
	if o.Subdistrict != nil {
		toSerialize["subdistrict"] = o.Subdistrict
	}
	if o.Streets != nil {
		toSerialize["streets"] = o.Streets
	}
	if o.Block != nil {
		toSerialize["block"] = o.Block
	}
	if o.Subblock != nil {
		toSerialize["subblock"] = o.Subblock
	}
	if o.HouseNumber != nil {
		toSerialize["houseNumber"] = o.HouseNumber
	}
	if o.PostalCode != nil {
		toSerialize["postalCode"] = o.PostalCode
	}
	if o.Building != nil {
		toSerialize["building"] = o.Building
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.PlaceName != nil {
		toSerialize["placeName"] = o.PlaceName
	}
	if o.OntologyName != nil {
		toSerialize["ontologyName"] = o.OntologyName
	}
	return json.Marshal(toSerialize)
}

type NullableFieldScore struct {
	value *FieldScore
	isSet bool
}

func (v NullableFieldScore) Get() *FieldScore {
	return v.value
}

func (v *NullableFieldScore) Set(val *FieldScore) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldScore) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldScore(val *FieldScore) *NullableFieldScore {
	return &NullableFieldScore{value: val, isSet: true}
}

func (v NullableFieldScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


