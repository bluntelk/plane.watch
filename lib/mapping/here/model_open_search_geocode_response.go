/*
 * Geocoding and Search API v7
 *
 * This document describes the Geocoding and Search API.
 *
 * API version: 7.78
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package here

import (
	"encoding/json"
)

// OpenSearchGeocodeResponse struct for OpenSearchGeocodeResponse
type OpenSearchGeocodeResponse struct {
	// The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.
	Items []GeocodeResultItem `json:"items"`
}

// NewOpenSearchGeocodeResponse instantiates a new OpenSearchGeocodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenSearchGeocodeResponse(items []GeocodeResultItem, ) *OpenSearchGeocodeResponse {
	this := OpenSearchGeocodeResponse{}
	this.Items = items
	return &this
}

// NewOpenSearchGeocodeResponseWithDefaults instantiates a new OpenSearchGeocodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenSearchGeocodeResponseWithDefaults() *OpenSearchGeocodeResponse {
	this := OpenSearchGeocodeResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *OpenSearchGeocodeResponse) GetItems() []GeocodeResultItem {
	if o == nil  {
		var ret []GeocodeResultItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *OpenSearchGeocodeResponse) GetItemsOk() (*[]GeocodeResultItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *OpenSearchGeocodeResponse) SetItems(v []GeocodeResultItem) {
	o.Items = v
}

func (o OpenSearchGeocodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableOpenSearchGeocodeResponse struct {
	value *OpenSearchGeocodeResponse
	isSet bool
}

func (v NullableOpenSearchGeocodeResponse) Get() *OpenSearchGeocodeResponse {
	return v.value
}

func (v *NullableOpenSearchGeocodeResponse) Set(val *OpenSearchGeocodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenSearchGeocodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenSearchGeocodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenSearchGeocodeResponse(val *OpenSearchGeocodeResponse) *NullableOpenSearchGeocodeResponse {
	return &NullableOpenSearchGeocodeResponse{value: val, isSet: true}
}

func (v NullableOpenSearchGeocodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenSearchGeocodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


